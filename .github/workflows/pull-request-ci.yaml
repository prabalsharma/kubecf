name: CI
on: push
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    env:
      # For KubeCF
      PINNED_TOOLS: true
      TOOLS_DIR: ${{ github.workspace }}/tools
      # For catapult
      # Note that credentials-related parts are in the individual steps
      BACKEND: aks
      AUTOSCALER: "true"
      DOWNLOAD_CATAPULT_DEPS: "false"

    defaults:
      run:
        working-directory: kubecf
    steps:
    - name: Checkout KubeCF
      uses: actions/checkout@v2
      with:
        path: kubecf
        submodules: recursive
    - name: Checkout catapult
      uses: actions/checkout@v2
      with:
        repository: SUSE/catapult
        path: catapult
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: cache.tools
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/tools
        key: ${{ runner.os }}-tools
    - run: make tools-install

    # Run the linters; split them out so it's easier to identify which one failed
    - run: make shellcheck
    - run: make yamllint
    - run: make helmlint

    - run: make kubecf-bundle

    - name: Start SSH agent
      run: |
        set -o errexit -o pipefail -o nounset
        eval "$(ssh-agent -s)"
        ssh-keygen -t rsa -b 4096 -N '' -C "KubeCF CI #${{ github.run_id }}" -f ssh-key
        ssh-add ssh-key
        SSH_PUBKEY="$(cat ssh-key.pub)"
        echo "::add-mask::${SSH_PUBKEY}"
        rm -f ssh-key ssh-key.pub
        echo "::set-env name=SSH_AUTH_SOCK::${SSH_AUTH_SOCK}"
        echo "::set-env name=SSH_AGENT_PID::${SSH_AGENT_PID}"

    - name: Create DNS Config
      run: |
        json_file="$(mktemp)"
        echo "$AZURE_DNS_JSON" > "${json_file}"
        echo "::set-env name=AZURE_DNS_JSON::${json_file}"
      env:
        AZURE_DNS_JSON: ${{ secrets.AZURE_DNS_JSON }}

    - name: Download gomplate
      run: |
        if test -x "${TOOLS_DIR}/gomplate" ; then
          echo "gomplate already exists; skipping."
          exit 0
        fi
        mkdir -p "${TOOLS_DIR}"
        wget -O "${TOOLS_DIR}/gomplate" \
          https://github.com/hairyhenderson/gomplate/releases/latest/download/gomplate_linux-amd64
        chmod a+x "${TOOLS_DIR}/gomplate"
        echo "::add-path::${TOOLS_DIR}"

    - name: cache.catapult-common-tools
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/catapult/modules/common/bin
        key: ${{ runner.os }}-catapult-common-tools

    - run: make k8s
      working-directory: catapult
      env:
        AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
        AZURE_CLUSTER_NAME: kubecf-ci-${{ github.run_id }}
        AZURE_DNS_RESOURCE_GROUP: ${{ secrets.AZURE_DNS_RESOURCE_GROUP }}
        AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}-${{ github.run_id }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        OWNER: ${{ github.repository_owner }}

    - name: export KUBECONFIG
      run: |
        set -o errexit -o nounset -o pipefail
        cd "build${BACKEND}"
        source .envrc
        echo "::set-env name=KUBECONFIG::${KUBECONFIG}"
        # DEBUGGING ONLY
        cat "${KUBECONFIG}" | base64 --wrap=0
      working-directory: catapult

    - name: Generate KubeCF Configuration
      run: |
        set -o errexit -o nounset -o pipefail

        make -C ${{ github.workspace }}/catapult kubecf-gen-config

        cd ${{ github.workspace }}/catapult/build${BACKEND}

        gomplate --context .=scf-config-values.yaml <<"EOF" \
          > ${{ github.workspace }}/kubecf/dev/kubecf/kubecf-values.yaml
        system_domain: {{ .system_domain }}
        services:
          router:
            annotations:
              "external-dns.alpha.kubernetes.io/hostname": "{{ .system_domain }}, *.{{ .system_domain }}"
            type: LoadBalancer
            externalIPs: {{ .services.router.externalIPs | toJSON }}
          ssh-proxy:
            annotations:
              "external-dns.alpha.kubernetes.io/hostname": "ssh.{{ .system_domain }}"
            type: LoadBalancer
            externalIPs: {{ index .services "ssh-proxy" "externalIPs" | toJSON }}
          tcp-router:
            annotations:
              "external-dns.alpha.kubernetes.io/hostname": "tcp.{{ .system_domain }}, *.tcp.{{ .system_domain }}"
            type: LoadBalancer
            externalIPs: {{ index .services "tcp-router" "externalIPs" | toJSON }}
            port_range:
              start: 20000
              end: 20008
        EOF
      env:
        BACKEND: aks

    - name: Fix up storage class
      # This works around an issue in brains-acceptance-tests
      # https://github.com/SUSE/brain-tests-release/blob/1bf94d8a64a0/src/acceptance-tests-brain/test-scripts/testutils.rb#L26
      # AKS only has the beta annotation for now
      run: |
        kubectl patch storageclass/default -p '{
          "metadata": {
            "annotations": {
              "storageclass.kubernetes.io/is-default-class": "true"
            }
          }
        }'

    - run: make cf-operator-apply
    - run: make cf-operator-wait

    - run: make kubecf-apply
      env:
        VALUES: dev/kubecf/kubecf-values.yaml
    - run: make kubecf-wait

    - run: make smoke-tests
    - run: make brain-tests
    - run: make sync-integration-tests
    - run: make acceptance-tests

    - name: Get Resource Info
      if: failure()
      run: |
        set +o errexit
        resources=(
          BOSHDeployment
          QuarksJob
          QuarksStatefulSet
          Job
          StatefulSet
          Endpoints
          pods
        )

        echo "Getting namespaces..."
        kubectl get namespaces --output=wide
        for namespace in cf-operator kubecf ; do
          for resource in "${resources[@]}" ; do
            printf "%bGetting %s:%s...%b\n" "\e[0;1;33m" "${namespace}" "${resource}" "\e[0m"
            kubectl get "${resource}" --namespace="${namespace}" --output=wide
          done
        done

    - name: Upload config
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: kubecf-values.yaml
        path: ${{ github.workspace }}/kubecf/dev/kubecf/kubecf-values.yaml

    - name: Fetch logs
      if: failure()
      run: |
        # Running klog.sh twice will grab logs from both namespaces
        dev/kube/klog.sh -f -r cf-operator
        dev/kube/klog.sh -f -r
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: klog.tar.gz
        path: ${{ github.workspace }}/kubecf/klog.tar.gz

    - name: kubernetes:teardown
      if: always()
      run: make clean
      working-directory: catapult
      env:
        AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
        AZURE_CLUSTER_NAME: kubecf-ci-${{ github.run_id }}
        AZURE_DNS_RESOURCE_GROUP: ${{ secrets.AZURE_DNS_RESOURCE_GROUP }}
        AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}-${{ github.run_id }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
