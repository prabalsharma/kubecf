# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ marky/minikube-actions ]
  pull_request:
    branches: [ marky/minikube-actions ]
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: europe-west1-c  # TODO: update to cluster zone
  RUN_ID: ${{github.run_id}}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  diego:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master
    - uses: helm/kind-action@v1.0.0-rc.1
      with:
        version: v0.8.1
        cluster_name: kubecf-kind
    - uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - name: Setup bazel
      uses: jwlawson/actions-setup-bazel@v1.0
      with:
        bazel-version: '3.1.0'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install parallel
      run: |
        sudo apt install -y parallel
    - name: Get a cluster
      run: |
        kubectl cluster-info
        kubectl get pods --all-namespaces
    - name: Install cf-operator
      run: |
        kubectl create namespace cf-operator
        bazel run //dev/cf_operator:apply
    - name: Wait for cf-operator
      run: |
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for=condition=Ready --timeout=600s -n cf-operator --selector=name=cf-operator pod'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for=condition=Ready --timeout=600s -n cf-operator --selector=name=quarks-job pod'
    - name: Wait for CRDs
      run: |
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/boshdeployments.quarks.cloudfoundry.org'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/quarksjobs.quarks.cloudfoundry.org'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/quarkssecrets.quarks.cloudfoundry.org'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/quarksstatefulsets.quarks.cloudfoundry.org'
    - name: Configure Domain
      run: |
        node_ip=$(bazel run @kubectl//:binary -- get nodes -o json | bazel run @jq//:binary -- -r '.items[].status.addresses[] | select(.type == "InternalIP").address')
        cat > "$(bazel info workspace)/dev/kubecf/system_domain_values.yaml" <<EOT
        system_domain: $node_ip.nip.io
        sizing:
          diego_cell:
            ephemeral_disk:
              size: 300000
        testing:
          cf_acceptance_tests:
            enabled: true
          smoke_tests:
            enabled: true
          sync_integration_tests:
            enabled: true
        services:
          router:
            type: ClusterIP
            externalIPs: [$node_ip]
          ssh-proxy:
            type: ClusterIP
            externalIPs: [$node_ip]
          tcp-router:
            type: ClusterIP
            externalIPs: [$node_ip]
          properties:
            acceptance-tests:
              acceptance-tests:
                acceptance_tests:
                  ginkgo:
                    nodes: 2
                    flake_attempts: 3
        EOT
    - name: Install KubeCF
      run: |
        bazel run //dev/kubecf:apply
    - name: Wait for KubeCF
      run: |
        kubectl get pods --namespace kubecf --watch &
        WATCH_PID=$!
        sleep 1200
        kill $WATCH_PID
        parallel --verbose --retries 40 --delay 15 ::: 'kubectl wait --for=condition=Ready -n kubecf --timeout=2400s --selector=quarks.cloudfoundry.org/deployment-name=kubecf pod'
    - name: Setup a logging dir
      run: |
        mkdir -p "logs-diego-${RUN_ID}"
    - name: Run Smoke Tests
      run: |
        echo "Logs are found here: https://kubecf-ci-logs.s3.eu-central-1.amazonaws.com/index.html"
        bazel run //testing:smoke_tests > "logs-diego-${RUN_ID}/smoke.log"
    - name: Run CATS
      run: |
        echo "Logs are found here: https://kubecf-ci-logs.s3.eu-central-1.amazonaws.com/index.html"
        bazel run //testing:acceptance_tests > "logs-diego-${RUN_ID}/cats.log"
    - name: Run SITS
      run: |
        echo "Logs are found here: https://kubecf-ci-logs.s3.eu-central-1.amazonaws.com/index.html"
        bazel run //testing:sync_integration_tests > "logs-diego-${RUN_ID}/sits.log"
    - uses: jakejarvis/s3-sync-action@master
      if: ${{ !always() }}
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: kubecf-ci-logs
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'eu-central-1'
        SOURCE_DIR: ./logs-diego-${{github.run_id}}
        DEST_DIR: logs-diego-${{github.run_id}}
  eirini:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master
    - uses: helm/kind-action@v1.0.0-rc.1
      with:
        version: v0.8.1
        cluster_name: kubecf-kind
    - uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - name: Setup bazel
      uses: jwlawson/actions-setup-bazel@v1.0
      with:
        bazel-version: '3.1.0'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install parallel
      run: |
        sudo apt install -y parallel
    - name: Get a cluster
      run: |
        kubectl cluster-info
        kubectl get pods --all-namespaces
    - name: Install cf-operator
      run: |
        kubectl create namespace cf-operator
        bazel run //dev/cf_operator:apply
    - name: Wait for cf-operator
      run: |
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for=condition=Ready --timeout=600s -n cf-operator --selector=name=cf-operator pod'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for=condition=Ready --timeout=600s -n cf-operator --selector=name=quarks-job pod'
    - name: Wait for CRDs
      run: |
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/boshdeployments.quarks.cloudfoundry.org'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/quarksjobs.quarks.cloudfoundry.org'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/quarkssecrets.quarks.cloudfoundry.org'
        parallel --verbose --retries 60 --delay 2 ::: 'kubectl wait --for condition=established --timeout=600s crd/quarksstatefulsets.quarks.cloudfoundry.org'
    - name: Configure Domain
      run: |
        node_ip=$(bazel run @kubectl//:binary -- get nodes -o json | bazel run @jq//:binary -- -r '.items[].status.addresses[] | select(.type == "InternalIP").address')
        cat > "$(bazel info workspace)/dev/kubecf/system_domain_values.yaml" <<EOT
        system_domain: $node_ip.nip.io
        features:
          eirini:
            enabled: true
        testing:
          smoke_tests:
            enabled: true
        services:
          router:
            type: ClusterIP
            externalIPs: [$node_ip]
          ssh-proxy:
            type: ClusterIP
            externalIPs: [$node_ip]
          tcp-router:
            type: ClusterIP
            externalIPs: [$node_ip]
          properties:
            acceptance-tests:
              acceptance-tests:
                acceptance_tests:
                  ginkgo:
                    nodes: 2
                    flake_attempts: 3
        EOT
    - name: Install KubeCF
      run: |
        bazel run //dev/kubecf:apply
    - name: Wait for KubeCF
      run: |
        kubectl get pods --namespace kubecf --watch &
        WATCH_PID=$!
        sleep 1200
        kill $WATCH_PID
        parallel --verbose --retries 40 --delay 15 ::: 'kubectl wait --for=condition=Ready -n kubecf --timeout=2400s --selector=quarks.cloudfoundry.org/deployment-name=kubecf pod'
    - name: Setup a logging dir
      run: |
        mkdir -p "logs-eirini-${RUN_ID}"
    - name: Run Smoke Tests
      run: |
        echo "Logs are found here: https://kubecf-ci-logs.s3.eu-central-1.amazonaws.com/index.html"
        bazel run //testing:smoke_tests > "logs-eirini-${RUN_ID}/smoke.log"
    - uses: jakejarvis/s3-sync-action@master
      if: ${{ !always() }}
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: kubecf-ci-logs
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'eu-central-1'
        SOURCE_DIR: ./logs-eirini-${{github.run_id}}
        DEST_DIR: logs-eirini-${{github.run_id}}
        