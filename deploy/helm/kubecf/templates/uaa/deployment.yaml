{{- if .Values.features.uaa.native }}

{{- $uaa_image := "" }}
{{- with .Values.features.uaa }}
  {{- if hasPrefix "@" .image_tag }}
    {{- $uaa_image = printf "%s%s" .image .image_tag }}
  {{- else }}
    {{- $uaa_image = printf "%s:%s" .image .image_tag }}
  {{- end }}
{{- end }}

{{- $secrets := list }}
{{- $secrets = append $secrets "var-credhub-admin-client-secret" }}
{{- $secrets = append $secrets "var-credhub-setup-client-secret" }}
{{- $secrets = append $secrets "var-uaa-ca" }}
{{- $secrets = append $secrets "var-uaa-clients-cc-routing-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cc-service-dashboards-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cc-service-key-client-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cf-smoke-tests-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-cloud-controller-username-lookup-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-doppler-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-gorouter-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-network-policy-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-routing-api-client-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-ssh-proxy-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-tcp-emitter-secret" }}
{{- $secrets = append $secrets "var-uaa-clients-tcp-router-secret" }}
{{- $secrets = append $secrets "var-uaa-database-password" }}
{{- $secrets = append $secrets "var-uaa-default-encryption-passphrase" }}
{{- $secrets = append $secrets "var-uaa-setup-client-secret" }}
{{- $secrets = append $secrets "var-uaa-login-saml" }}
{{- $secrets = append $secrets "var-uaa-admin-client-secret" }}
{{- $secrets = append $secrets "with-ops" }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: uaa
spec:
  selector:
    matchLabels:
      app: uaa
  replicas: 1
  template:
    metadata:
      labels:
        app: uaa
      annotations:
        quarks.cloudfoundry.org/wait-for: '[ "database" ]'
    spec:
      serviceAccountName: uaa
      initContainers:
      - name: generate-config
        {{- with .Values.features.uaa }}
        image: {{ .init_image }}:{{ .init_image_tag }}
        {{- end }}
        {{- $dburl := printf "jdbc:mysql://database.%s.svc:3306/uaa" .Release.Namespace }}
        {{- $db_adapter := "mysql "}}
        {{- if .Values.features.embedded_database.enabled | not }}
        {{- with .Values.features.external_database }}
        {{- $dburl = printf "jdbc:%s://%s:%s" .type .host .port }}
        {{- $db_adapter = .type }}
        {{- end }}
        {{- end }}
        command:
        - /usr/bin/ruby
        - -e
        - |
          require 'json'
          require 'yaml'

          def secret(path)
            File.read("/run/secrets/#{path}").chomp
          end

          manifest = YAML.load secret('with-ops/manifest.yaml')
          ig = manifest['instance_groups'].find { |g| g['name'] == 'uaa' }
          job = ig['jobs'].find { |j| j['name'] == 'uaa' }
          puts job.to_yaml

          # Replace the OAuth client secrets because we don't get template-render
          job['properties']['uaa']['clients'].each_value do |config|
            /^\(\((?<secret_name>[^\)]+)\)\)$/ =~ config['secret']
            next if secret_name.nil?
            secret_name.gsub! /_/, '-'
            config['secret'] = secret("var-#{secret_name}/password")
          end

          config = {
            admin: {
              client_secret: secret('var-uaa-admin-client-secret/password'),
            },
            ca_certs: [ secret('var-uaa-ca/certificate') ],
            database: {
              url: '{{ $dburl }}',
              username: 'uaa',
              password: secret('var-uaa-database-password/password'),
            },
            encryption: {
              active_key_label: 'default_key',
              encryption_keys: [{
                label: 'default_key',
                passphrase: secret('var-uaa-default-encryption-passphrase/password'),
              }]
            },
            issuer: {
              uri: 'https://uaa.{{ .Values.system_domain }}',
            },
            login: {
              saml: {
                activeKeyId: 'key-1',
                keys: {
                  'key-1': {
                    certificate: secret('var-uaa-login-saml/certificate'),
                    key: secret('var-uaa-login-saml/private_key'),
                    passphrase: '',
                  }
                }
              }
            },
            oauth: {
              clients: job['properties']['uaa']['clients']
            },
            spring_profiles: "default,{{ $db_adapter }}",
          }

          # Round trip through JSON to convert symbol to string
          config = JSON.load config.to_json
          puts "config loaded: \n#{config.to_yaml}"

          Dir.chdir('/etc/config') do
            open('uaa.yml', 'w') { |f| f.puts config.to_json }
          end
        volumeMounts:
        - name: uaa-config
          mountPath: /etc/config
        {{- range $secrets }}
        - name: {{ . }}
          mountPath: /run/secrets/{{ . }}
        {{- end }}
      - name: generate-log-config
        image: {{ $uaa_image }}
        command:
        - sh
        - -c
        - |
          cat > /etc/config/log4j2.properties <<"EOF"
          status = error
          dest = err
          name = UaaLog

          property.log_pattern=[%d{yyyy-MM-dd HH:mm:ss.SSS}] uaa%X{context} - %pid [%t] .... %5p --- %c{1}: %replace{%m}{(?<=password=|client_secret=)([^&]*)}{<redacted>}%n

          appender.uaaDefaultAppender.type = Console
          appender.uaaDefaultAppender.name = UaaDefaultAppender
          appender.uaaDefaultAppender.layout.type = PatternLayout
          appender.uaaDefaultAppender.layout.pattern = [UAA] ${log_pattern}

          appender.uaaAuditAppender.type = Console
          appender.uaaAuditAppender.name = UaaAuditAppender
          appender.uaaAuditAppender.layout.type = PatternLayout
          appender.uaaAuditAppender.layout.pattern = [UAA_AUDIT] ${log_pattern}

          rootLogger.level = info
          rootLogger.appenderRef.uaaDefaultAppender.ref = UaaDefaultAppender

          logger.UAAAudit.name = UAA.Audit
          logger.UAAAudit.level = info
          logger.UAAAudit.additivity = true
          logger.UAAAudit.appenderRef.auditEventLog.ref = UaaAuditAppender

          logger.cfIdentity.name = org.cloudfoundry.identity
          logger.cfIdentity.level = info
          logger.cfIdentity.additivity = false
          logger.cfIdentity.appenderRef.uaaDefaultAppender.ref = UaaDefaultAppender          
          EOF
        volumeMounts:
        - name: uaa-config
          mountPath: /etc/config
      - name: build-uaa-truststore
        image: {{ $uaa_image }}
        command:
        - 'sh'
        - '-c'
        - |
          find_keytool_or_fail_fast() {
            local has_keytool
            ls "${JAVA_HOME}"/bin/keytool
            has_keytool=$?
            if [ ${has_keytool} -ne 0 ]; then
              exit ${has_keytool}
            fi
          }
          import_cert() {
            local pemfile="${1}"
            local alias="${2}"
            echo "Adding ${pemfile} to truststore"
            # Have to use cat instead of -file
            # because keytool won't understand all of the filenames!
            cat "${pemfile}" | "${JAVA_HOME}"/bin/keytool \
              -noprompt \
              -import \
              -trustcacerts \
              -alias "${alias}" \
              -keystore "${TRUSTSTORE_FILE}" \
              -storepass "${TRUSTSTORE_PASSWORD}"
          }
          get_alias() {
            local pemfile="${1}"
            basename "${pemfile}" .pem
          }
          add_ca_certs() {
            local has_ca_certs
            ls ${SECRETS_DIR}/ca_certs/*.pem
            has_ca_certs=$?
            if [ ${has_ca_certs} -eq 0 ]; then
              for cert in ${SECRETS_DIR}/ca_certs/*.pem; do
                import_cert "${cert}" "$(get_alias $cert)"
              done
            fi
          }
          add_system_certs() {
            for cert in $OS_CERTS_DIR/*.pem; do
              import_cert "${cert}" "$(get_alias $cert)"
            done
          }
          main() {
            find_keytool_or_fail_fast
            add_ca_certs
            add_system_certs
          }
          main
        env:
        - name: SECRETS_DIR
          value: /var/run/secrets
        - name: TRUSTSTORE_FILE
          value: /etc/truststore/uaa.pkcs12.truststore
        - name: TRUSTSTORE_PASSWORD
          value: changeit # XXX CHANGE ME
        - name: JAVA_HOME
          value: /layers/paketo-buildpacks_bellsoft-liberica/jre
        - name: OS_CERTS_DIR
          value: /etc/ssl/certs
        volumeMounts:
        #- name: ca-certs-files
        #  mountPath: /var/run/secrets/ca_certs
        #  readOnly: true
        - name: secrets
          mountPath: /var/run/secrets
          readOnly: true
        - name: truststore-file
          mountPath: /etc/truststore
      containers:
      - name: uaa
        image: {{ $uaa_image }}
        resources:
          requests:
            memory: {{ .Values.sizing.uaa.resources.requests.memory }}
            cpu: {{ .Values.sizing.uaa.resources.requests.cpu }}
        ports:
        - name: http-uaa
          containerPort: 8080
          protocol: TCP
        env:
        - name: BPL_TOMCAT_ACCESS_LOGGING
          value: "y" # XXX change me
        - name: CATALINA_OUT
          value: /proc/self/fd/1
        - name: JAVA_OPTS
          # XXX change trust store password
          value: >-
            -Djava.security.egd=file:/dev/urandom
            -Dlogging.config=/etc/config/log4j2.properties
            -Dlog4j.configurationFile=/etc/config/log4j2.properties
            -DCLOUDFOUNDRY_CONFIG_PATH=/etc/config
            -DSECRETS_DIR=/etc/secrets
            -Djavax.net.ssl.trustStore=/etc/truststore/uaa.pkcs12.truststore
            -Djavax.net.ssl.trustStoreType=PKCS12
            -Djavax.net.ssl.trustStorePassword=changeit
            -Dstatsd.enabled=true
        volumeMounts:
        - name: uaa-config
          mountPath: /etc/config
        #- name: smtp-credentials-file
        #  mountPath: /var/run/secrets/smtp_credentials.yml
        #  subPath: smtp_credentials.yml
        #  readOnly: true
        #- name: database-credentials-file
        #  mountPath: /var/run/secrets/database_credentials.yml
        #  subPath: database_credentials.yml
        #  readOnly: true
        #- name: admin-client-credentials-file
        #  mountPath: /var/run/secrets/admin_client_credentials.yml
        #  subPath: admin_client_credentials.yml
        #  readOnly: true
        #- name: jwt-policy-signing-keys-file
        #  mountPath: /var/run/secrets/jwt_policy_signing_keys.yml
        #  subPath: jwt_policy_signing_keys.yml
        #  readOnly: true
        - name: truststore-file
          mountPath: /etc/truststore
          readOnly: true
        - name: secrets
          mountPath: /var/run/secrets
        livenessProbe:
          httpGet:
            path: /healthz
            port: http-uaa
          failureThreshold: 25
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /healthz
            port: http-uaa
      volumes:
      #- name: uaa-config
      #  configMap:
      #    name: uaa-config
      #- name: smtp-credentials-file
      #  secret:
      #    optional: true
      #    secretName: uaa-smtp-credentials
      #- name: database-credentials-file
      #  secret:
      #    optional: true
      #    secretName: uaa-database-credentials
      #- name: admin-client-credentials-file
      #  secret:
      #    secretName: uaa-admin-client-credentials
      #- name: jwt-policy-signing-keys-file
      #  secret:
      #    secretName: var-uaa-jwt-signing-key
      #- name: ca-certs-files
      #  secret:
      #    optional: true
      #    secretName: uaa-ca-certs
      - name: uaa-config
        emptyDir: {}
      - name: secrets
        emptyDir: {}
      - name: truststore-file
        emptyDir: {}
      {{- range $secrets }}
      - name: {{ . }}
        secret:
          secretName: {{ . }}
      {{- end }}
{{- end }}
